<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[单行文本超出部分隐藏为省略号]]></title>
    <url>%2F2019%2F08%2F17%2F%E5%8D%95%E8%A1%8C%E6%96%87%E6%9C%AC%E8%B6%85%E5%87%BA%E9%83%A8%E5%88%86%E9%9A%90%E8%97%8F%E4%B8%BA%E7%9C%81%E7%95%A5%E5%8F%B7%2F</url>
    <content type="text"><![CDATA[#想要得到预想中的效果，需要四条属性 盒子的宽度，即 width: ; 定宽 禁止换行 white-space: nowrap; overflow: hidden; 溢出部分隐藏 text-overflow: ellipsis; 显示省略号代替被修剪的文本]]></content>
  </entry>
  <entry>
    <title><![CDATA[第一阶段学习总结]]></title>
    <url>%2F2019%2F08%2F16%2F%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[当获悉第一阶段学习结束之后需要提交一份学习总结时，虽然我不说，但内心是拒绝的。而与其说是学习“总结”，不如叫做学习感想。我没有感想。我只会学习，学习后工作，我是一个没有感情的程序员。所以，在经过一夜的冥思苦想之后，我取出键盘，敲下了这篇毫无营养的文章。让我们来总结一下，第一阶段的HTML与CSS学习生涯。 HTML与CSS的学习，是个短暂却令人痛苦的过程与我曾经熟识的JAVA与C语言不同，在HTML与CSS的学习与使用过程中，鲜少能接触到逻辑相关，或是数据交互的部分，它们更像是一套万代的PG高达模型，先用HTML拼起骨架，再使用大量的CSS堆砌起页面的基本样式，简简单单，方便快捷，用不上一天时间，一套基本的页面，连同移动端+PC端，就能新鲜出炉了，乍一看上去效果甚至还蛮不错。]]></content>
  </entry>
  <entry>
    <title><![CDATA[元素类型]]></title>
    <url>%2F2019%2F08%2F15%2F%E5%85%83%E7%B4%A0%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[一、HTML元素分类根据css显示分类 , HTML元素被分为三种类型:块状元素 , 内联元素 , 可变元素 1.块状元素 ( block element ) 块状元素在网页中就是以块的形式显示 , 所谓块状就是元素显示为矩形区域 , 常用的块状元素包块div,dl,dt,dd,ol,ul,(h1-h6),p,form,hr,table,tr,td等； 默认情况下 , 块状元素都会占据一行 , 通俗地说 , 两个相邻块状元素不会出现并列显示的现象；默认情况下 , 块状元素会按顺序自上而下排列。 块状元素都可以定义自己的宽度和高度。 块状元素一般都作为其他元素的容器 , 它可以容纳其它内联元素和其它块状元素。 我们可以把这种容器比喻为一个盒子。 2.内联元素 ( inline element ) ( 或是行内元素、行间元素、内嵌元素 ) 常见的内联元素如 : a,span,i,em,strong,b , img , input等 内联元素的表现形式是始终以行内逐个进行显示 内联元素没有自己的形状 , 不能定义它的宽和高,它显示的宽度、高度只能根据所包含内容的高度和宽度来确定 , 它的最小内容单元也会呈现矩形形状 内联元素也会遵循盒模型基本规则 , 如可以定义padding ,border ,margin, background等属性 , 但个别属性不能正确显示 二、 元素类型的转换盒模型可通过display属性来改变元素的类型 display属性与属性值 (常用)值 | 描述 | - | -inline | 默认，显示为内联元素，元素前后没有换行符flex | 定义伸缩容器none | 此元素不会被显示block | 显示为块级元素，前后带有换行符inline-block | 元素的内容以块状显示 , 行内的其他元素显示在同一行( 只有这一个元素类型支持vertical-align属性 )table-cell | 此元素会作为一个表格单元格显示list-item | 此元素会作为列表显示run-in | 此元素会根据上下文作为块级元素或内联元素显示table | 此元素会作为块级表格来显示，表格前后带有换行符inline-table | 此元素会作为内联表格来显示，表格前后没有换行符 另注： 当元素设置了float属性后 , 就相当于给该元素加了display:block;属性 大部分块元素display属性值默认为block , 其中列表的默认值为list-item。 大部分内联元素的display属性值默认为inline,其中img,input , 默认为inline-block。 三、置换元素内联元素一般是不能设置宽高的 , 但是也有特殊情况 , 比如img是内联元素 , 但可以设置宽高 , 这让不少人迷惑。于是我们就要引入HTML中置换元素的概念。 置换元素 : 浏览器根据元素的标签和属性 , 来决定元素的具体显示内容。 例如 :浏览器会根据img标签的src属性的值来读取图片信息并显示出来input标签的type属性来决定是显示输入框 , 还是单选按钮等 不可替换元素 : html 的大多数元素是不可替换元素 , 即其内容直接表现给用户端 附录1 : 关于属性的继承什么叫继承？ 父盒子的属性 , 如果子盒子能够读取得到 , 那么就是可以继承。 不可继承 文本可继承 列表元素可继承 display letter-spacing list-style margin word-spacing list-style-type border white-space list-style-position padding line-height list-style-image background color height font min-height font-family max-height font-size width font-style min-width font-variant max-width font-weight overflow text-decoration position text-transform left direction right text-indent top text-align bottom z-index float clear table-layout vertical-align page-break-after page-bread-before unicode-bidi 附录2 : 元素类型表块元素(block element)元素 | 描述 | - | - address | 地址 blockquote | 块引用 center | 局中对齐块 dir | 目录列表 div | 常用块级容器 , 也是css layout的主要标签 dl | 定义列表 fieldset | form控制组 form | 交互表单 h1 | 大标题 h2 | 副标题 h3 | 3级标题 h4 | 4级标题 h5 | 5级标题 h6 | 6级标题 hr | 水平分隔线 isindex | input prompt menu | 菜单列表 noframes | frames可选内容 , ( 不支持frame的浏览器显示此区块内容 ) noscript | 可选脚本内容 ( 对于不支持script的浏览器显示此内容 ) ol | 排序表单 p | 段落 pre | 格式化文本 table | 表格 ul | 非排序列表 内联元素(inline element)元素 | 描述 | - | - a | 超链接或锚点 acronym | 首字 b | 粗体(不推荐) bdo | 定义文字的方向 big | 大字体 br | 换行 cite | 引用 code | 计算机代码(在引用源码的时候需要) dfn | 定义字段 em | 强调 font | 字体设定(不推荐) i | 斜体 img | 图片 input | 输入框 kbd | 定义键盘文本 label | 表格标签 q | 短引用 s | 中划线(不推荐) samp | 定义范例计算机代码 select | 项目选择 small | 小字体文本 span | 常用内联容器 , 定义文本内区块 strike | 中划线 strong | 粗体强调 sub | 下标 sup | 上标 textarea | 多行文本输入框 tt | 电传文本 u | 下划线 var | 定义变量abbr | 缩写]]></content>
  </entry>
  <entry>
    <title><![CDATA[移动端布局]]></title>
    <url>%2F2019%2F08%2F15%2F%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[一 弹性布局（百分比布局，流式布局）——拉勾网、天猫首页好处：充分发挥大手机的优势——显示内容更多缺点：屏幕过大，间距过大，比例失调 特点： 顶部与底部的bar不管分辨率怎么变，它的高度和位置都不变 中间每条招聘信息不管分辨率怎么变，招聘公司的图标等信息都位于条目的左边，薪资都位于右边 如何识别手机尺寸 通过设置meta语句： 1&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot; /&gt; 在网页的中增加这句话，可以让网页的宽度自动适应手机屏幕的宽度。 也可以写成： 1&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot; /&gt; 属性 | 意义 | - | -width | 可视区域的宽度height | 可视区域的高度device-width | 设备屏幕的宽度initial-scale | 页面首次被显示时的缩放级别（0-10.0），取值为1时页面按实际尺寸显示，无任何缩放minimum-scale | 设定最小缩小比例（0-10.0），取值为1时将禁止用户缩小至实际尺寸之下maximum-scale | 设定最大放大比例（0-10.0），取值为1时将禁止用户放大至实际尺寸之上user-scalable | 设定用户是否可以缩放（yes/no） viewport的概念移动设备上的viewport就是设备的屏幕上能用来显示我们的网页的那一块区域，但viewport又不局限于浏览器可视区域的大小，它可能比浏览器的可视区域要大，也可能比浏览器的可视区域要小。在默认情况下，一般来讲，移动设备上的viewport都是要大于浏览器可视区域的，这是因为考虑到移动设备的分辨率相对于桌面电脑来说都比较小，所以为了能在移动设备上正常显示那些传统的、为桌面浏览器设计的网站，移动设备上的浏览器都会把自己默认的viewport设为980px或1024px（也可能是其它值，这个是由设备自己决定的），但带来的后果就是浏览器会出现横向滚动条，因为浏览器可视区域的宽度是比这个默认的viewport的宽度要小的。 关于像素在css中，我们一般使用px作为单位，在桌面浏览器中css的1个像素往往都是对应着电脑屏幕的1个物理像素，这可能会造成我们的一个错觉，那就是css中的像素就是设备的物理像素。但实际情况却并非如此，css中的像素只是一个抽象的单位，在不同的设备或不同的环境中，css中的1px所代表的设备物理像素是不同的。在为桌面浏览器设计的网页中，我们无需对这个斤斤计较，但在移动设备上，必须弄明白这点。在早先的移动设备中，屏幕像素密度都比较低，如iphone3，它的分辨率为320x480，在iphone3上，一个css像素确实是等于一个屏幕物理像素的。后来随着技术的发展，移动设备的屏幕像素密度越来越高，从iphone4开始，苹果公司便推出了所谓的Retina屏，分辨率提高了一倍，变成640x960，但屏幕尺寸却没变化，这就意味着同样大小的屏幕上，像素却多了一倍，这时，一个css像素是等于两个物理像素的。 注：devicePixelRatio 设备像素比 (DPR) Retina屏 —–视网膜屏幕 二 等比缩放布局（rem布局）——网易、淘宝首页1. rem 视口(viewport)设置 1&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1,maximum-scale=1, minimum-scale=1&quot;&gt; 在html上根据不同分辨率设置不同font-size 页面里除了font-size之外的其它css尺寸都使用了rem作为单位 正文的font-size需要额外的媒介查询，并且不使用rem 例如1234567891011121314151617181920@media screen and (max-width: 320px) &#123; body&#123; font-size: 12px; &#125;&#125;@media screen and (min-width:320px) and (max-width: 375px) &#123; body&#123; font-size: 14px; &#125;&#125;@media screen and (min-width: 375px) and (max-width: 414px) &#123; body&#123; font-size: 16px; &#125;&#125;@media screen and (min-width: 414px) &#123; body&#123; font-size: 18px; &#125;&#125; 2. VW:vw是可视区宽度单位。1vw等于可视区宽度的百分之一。 100vw=相对于视窗宽度 100vh=相对于视窗高度 1vw = 1%视口宽（viewport） 在iPhone6里根字号等于100px的时候，视口宽等于375html— font-size:100px 在iPhone6里跟字号100px,1vw==3.75 ,然后将px单位转换为vw，让其随着视口变化而变化1vw==3.75？ vw == 100px 26.67 vw 等于 100px 所以就将HTML的字号设置为26.67vw，这样HTML的字号就会随着视口变化而变化了。 在rem布局里，文字不推荐准换为rem，可以使用媒体查询]]></content>
  </entry>
  <entry>
    <title><![CDATA[常用垂直水平居中方法]]></title>
    <url>%2F2019%2F08%2F15%2F%E5%B8%B8%E7%94%A8%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[常用垂直水平居中方式123&lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;&lt;/div&gt; 12.box&#123;width: 400px;height: 400px;&#125;.child&#123;width: 100px;height: 100px;&#125; 方法一12.box&#123;position: relative;&#125;.child&#123;position: absolute;top: 50%;left: 50%;transform: translate(-50%, -50%);&#125; 方法二12.box&#123;display: flex;&#125;.child&#123;margin: auto;&#125; 方法三1.box&#123;display: flex;align-items: center;justify-content: center;&#125; 方法四12.box&#123;display: table-cell;vertical-align: middle;text-align: center;&#125;.child&#123;display: inline-block;&#125; 方法五12.box&#123;position: relative;&#125;.child&#123;position: absolute;top: 0;right: 0;bottom: 0;left: 0;margin: auto;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[190815：动画练习1]]></title>
    <url>%2F2019%2F08%2F15%2FCSS3%E5%8A%A8%E7%94%BB%E7%BB%83%E4%B9%A0%EF%BC%9A%E4%B8%91%E7%9A%84%E4%B8%80%E5%8C%B9%E7%9A%84%E5%9B%BE%E7%89%87%E5%88%87%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[8月15号的练习，css3 2D动画 看起来对资源的占用量似乎很高 定义动画时会使用大量代码 尝试使用 order 来代替 disappear 动画，失败 图片路径为当前路径下 bg1.jpg, bg2.jpg 以及bg3 bg4 bg5.jpg 感受到了css3动画学习的简便，似乎比js要简单一些 遗留问题：order 到底要在什么情况下使用结构 12345678910111213141516171819202122232425&lt;body&gt; &lt;img src=&quot;bg1.jpg&quot; id=&quot;p1&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;bg2.jpg&quot; id=&quot;p2&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;bg3.jpg&quot; id=&quot;p3&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;bg4.jpg&quot; id=&quot;p4&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;bg5.jpg&quot; id=&quot;p5&quot; alt=&quot;&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;a href=&quot;#p1&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;#p2&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;#p3&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;#p4&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;#p5&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/body&gt; 样式123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;style&gt; *&#123;margin: 0;padding: 0;&#125; html, body&#123;height: 100%;&#125; body&#123;overflow: hidden;&#125; img&#123;width: 100%;height: 100%;position: absolute;z-index: 1;&#125; img:not(:target)&#123;animation: disappear 3s;&#125; ul&#123;width: 100%;height: 174px;text-align: center;position: relative;z-index: 1000;top: 60%;&#125; li&#123;height: 170px;width: 174px;border: 2px solid #fff;border-radius: 5px;display: inline-block;margin: 0 5px;&#125; a&#123;background-color: #ccc;font-size: 14px;font-weight: bold;font-style: italic;text-shadow: -3px -5px 5px rgba(102, 102, 102, .4); display: block;width: 100%;height: 100%;box-sizing: border-box;border-radius: 3px;position: relative;&#125; a::before&#123;content: &quot;&quot;;width: 130px;height: 130px;box-sizing: border-box;border: 5px solid #fff;left: 20px;top: -65px;background-size: 350px 200px;background-repeat: no-repeat;background-position-x: -100px;&#125; a::after&#123;content: &quot;&quot;;width: 120px;height: 120px;background-color: rgba(0, 0, 0, .4);left: 25px;top: -60px;&#125; a::before, a::after&#123;border-radius: 50%;display: block;position: absolute;transition: all .2s linear;&#125; a:hover::after&#123;opacity: 0;&#125; #p1:target&#123;z-index: 100;animation: animation1 .5s forwards;&#125; #p2:target&#123;z-index: 100;animation: animation2 1s forwards;&#125; #p3:target&#123;z-index: 100;animation: animation3 .8s forwards;&#125; #p4:target&#123;z-index: 100;animation: animation4 .5s forwards;&#125; #p5:target&#123;z-index: 100;animation: animation5 .8s forwards;&#125; li:nth-child(1) a&#123;background-color: #02646e&#125; li:nth-child(2) a&#123;background-color: #eb0837&#125; li:nth-child(3) a&#123;background-color: #67b374&#125; li:nth-child(4) a&#123;background-color: #e6674a&#125; li:nth-child(5) a&#123;background-color: #e61061&#125; li:nth-child(1) a::before&#123;background-image: url(bg1.jpg);&#125; li:nth-child(2) a::before&#123;background-image: url(bg2.jpg);&#125; li:nth-child(3) a::before&#123;background-image: url(bg3.jpg);&#125; li:nth-child(4) a::before&#123;background-image: url(bg4.jpg);&#125; li:nth-child(5) a::before&#123;background-image: url(bg5.jpg);&#125; @keyframes animation1&#123; 0%&#123;width: 0;height: 0;&#125; 30%&#123;width: 0;height: 100%;&#125; 100%&#123;width: 100%;height: 100%;&#125; &#125; @keyframes animation2&#123; 0%&#123;transform: rotate(0);width: 0;height: 0;margin: auto;left: 0;right: 0;top: 0;bottom: 0;&#125; 100%&#123;transform: rotate(360deg);width: 100%;height: 100%;left: 0;right: 0;top: 0;bottom: 0;margin: auto;&#125; &#125; @keyframes animation3&#123; 0%&#123;width: 0;height: 0;transform: scale(0);margin: auto;left: 0;right: 0;top: 0;bottom: 0;&#125; 100%&#123;width: 100%;height: 100%;transform: scale(100%);margin: auto;left: 0;right: 0;top: 0;bottom: 0;&#125; &#125; @keyframes animation4&#123; 0%&#123;right: 100%;&#125; 100%&#123;right: 0;&#125; &#125; @keyframes animation5&#123; 0%&#123;opacity: 0;&#125; 100%&#123;opacity: 1;&#125; &#125; @keyframes disappear&#123; 0%&#123;z-index: 100;&#125; 100%&#123;z-index: 1;&#125; &#125;&lt;/style&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[190815随记]]></title>
    <url>%2F2019%2F08%2F15%2F190815%E9%9A%8F%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[1.inline-block 垂直不对齐的情况 inline-block 会默认基线对齐，在对容器使用时，因内部文字数量及字号行高不同，可能会影响对齐效果。 解决方案：在类型为 inline-block 的容器上添加 vertical-align: top; 2.动画练习时遇到的问题的解决方案 12345@keyframes disappear&#123; 0%&#123;z-index: 100;&#125; 100%&#123;z-index: 1;&#125;&#125;img:not(:target)&#123;animation: disappear 3s;&#125; 3.经常忘记的属性 文本倾斜 font-style: italic]]></content>
  </entry>
  <entry>
    <title><![CDATA[placeholder文字水平居中]]></title>
    <url>%2F2019%2F08%2F14%2Fplaceholder%E6%96%87%E5%AD%97%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%2F</url>
    <content type="text"><![CDATA[placeholder中文字实现水平居中的方法1234input::placeholder&#123;text-align: center;&#125;input::-ms-input-placeholder&#123;text-align: center;&#125;input::-moz-input-placeholder&#123;text-align: center;&#125;input::-webkit-input-placeholder&#123;text-align: center;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[CSS3 动画]]></title>
    <url>%2F2019%2F08%2F14%2FCSS3%E5%8A%A8%E7%94%BB%2F</url>
    <content type="text"><![CDATA[一 渐变 IE10+线性渐变linear-gradient1background-image: linear-gradient(方向，起始颜色，结束颜色) 处理兼容12345background-image: -webkit-linear-gradient(to top, red, yellow);background-image: -moz-linear-gradient(to top, red, yellow);background-image: -o-linear-gradient(to top, red, yellow);background-image: -ms-linear-gradient(to top, red, yellow);background-image: linear-gradient(to top, red, yellow); 方向可以使用角度 (30deg) 也可以使用关键字 (to right等)12345to top:0deg 360deg -360deg;to bottom:180deg -180deg;to right:90deg -270deg;to left:-90deg 270deg;to top left:从右下角到左上角 多色线性渐变，只需在后面添加更多的颜色即可12background-image: linear-gradient(to top, red, yellow, blue, green, orange) 自定义线性渐变123456789101112background-image: linear-gradient( to top, rgba(255, 206, 0, .5) 0%, rgba(255, 255, 0, .4) 10%, rgba(255, 104, 0, .6) 15%, rgba(255, 0, 255, .5) 20%, rgba(255, 0, 206, .8) 40%, rgba(255, 0, 200, .5) 50%, rgba(255, 0, 222, .9) 60%, rgba(255, 123, 0,.2) 80%, rgba(255, 108, 0,.5) 100%) 重复线性渐变12345background-image: repeating-linear-gradient( to top, rgba(255,206, 0, .5) 40px, rgba(255,255, 0, .4) 80px) 径向渐变radial-gradient12345678910111213background-image: radial-gradient(形状 at 圆心坐标, 颜色)background-image:radial-gradient(主要半径 次要半径 at 水平 垂直, red, yellow)background-image:radial-gradient(50px 100px at 200px 250px, red, yellow)background-image:radial-gradient(主次半径相等就是圆 at 水平 垂直,red,yellow)background-image:radial-gradient(circle at right bottom, red, yellow)background-image:radial-gradient(主次半径不相等是椭圆 at 水平 垂直,red,yellow)background-image:radial-gradient(ellipse at top, red, yellow)background-image:radial-gradient(圆心与中心重合,red,yellow)background-image:radial-gradient(circle, red, yellow) 重复径向渐变12345background-image: repeating-radial-gradient( to top, rgba(255, 206, 0, .5) 40px, rgba(255, 255, 0, .4) 80px) 二 过渡 IE10+transition:属性 | 意义 | - | -transition-property | 过渡属性transition-delay | 过渡延迟时间transition-duration | 过渡所需时间transition-timing-function | 过渡动画函数 各个属性可以分开写，一次可以过渡多个属性123456789101112131415161718192021222324-webkit-transition-property:background, width, height;-webkit-transition-duration:1s, 1s, 1s;-webkit-transition-timing-function:linear, linear, linear;-webkit-transition-delay:1s, 0s, 2s;-moz-transition-property:background, width, height;-moz-transition-duration:1s, 1s, 1s;-moz-transition-timing-function:linear, linear, linear;-moz-transition-delay:1s, 0s, 2s;-ms-transition-property:background, width, height;-ms-transition-duration:1s,1s,1s;-ms-transition-timing-function:linear, linear, linear;-ms-transition-delay:1s, 0s, 2s;-o-transition-property:background, width, height;-o-transition-duration:1s, 1s, 1s;-o-transition-timing-function:linear, linear, linear;-o-transition-delay:1s, 0s, 2s;transition-property:background, width, height;transition-duration:1s, 1s, 1s;transition-timing-function:linear, linear, linear;transition-delay:1s, 0s, 2s; 注：过渡动画函数 timing-function属性值 | 效果 | - | -ease | 先快后慢，逐渐变慢linear | 匀速ease-in | 速度越来越快，称为渐显效果ease-out | 速度越来越慢，称为渐隐效果ease-in-out | 先加速再减速，称为渐显渐隐效果cubic-bezier( .61, .17, .92, .1 ) | 三次贝塞尔曲线 三 变形 transform2D变形 transform-function### 属性 取值 说明 translate (x,y) 单一方向偏移可以直接使用：translateX( ) 和 translateY( ); scale (x,y) 绝对值小于 1 为缩小，大于 1 放大 ;只写一个值代表四周同时放大缩小 ; 取值可以为负数，负数时会进行翻转后再缩放 rotate (deg) 正数时顺时针旋转，负数时逆时针旋转 skew (x,y) 单一方向倾斜可以直接使用：skewX( ) 和 skewY( ); transform-origin 指定元素的中心点位置可以是百分数，数值，方向单词 transform-origin: 50% 50%; transform-origin: 20px 100px; transform-origin: center bottom; 四 3D 变形浏览器支持情况Internet Explorer 10 和 Firefox 支持 3D 变形Chrome 和 Safari 需要前缀 -webkit-Opera 仍然不支持 3D 变形 (它只支持 2D 变形) 变形类型 transform-style: preserve-3d实现一些3D效果的时候，transform-style: preserve-3d是少不了的一般而言，该声明应用在3D变换的兄弟元素们的父元素上 preserve-3d 放到父元素上 12345-webkit-transform-style: preserve-3d;-moz-transform-style: preserve-3d;-ms-transform-style: preserve-3d;-o-transform-style: preserve-3d;transform-style: preserve-3d; perspective：透视，视角，景深写到父元素上 1234-webkit-perspective: 1200px;-moz-perspective: 1200px;-ms-perspective: 1200px;perspective: 1200px; perspective的两种书写方式perspective:1200px;transform:perspective(1200px) 属性 | 描述 | - | -transform: translate3d(x,y,z) | 3D位移transform:translateX() | X轴位移transform:translateY() | Y轴位移transform:translateZ() | Z轴位移transform: rotate3d(x, y, z, deg) | 3D旋转transform: rotateX() | X轴旋转transform: rotateY() | Y轴旋转transform: rotateZ() | Z轴旋转transform: scale3d() | 3D缩放，不能自己单独使用，需要配合其他变形一起使用才会有效果transform: scaleX() | X轴缩放transform: scaleY() | Y轴缩放transform: scaleZ() | Z轴缩放五 CSS3动画 相关动画属性animation: 动画名称 动画所需时间 动画播放方式 动画开始时间 循环次数 播放方向 属性 | 描述 | - | -animation-name | 动画名称—-声明的动画名称animation-duration | 所需时间—-完成0%-100%动画所需时间animation-timing-function | 播放方式—-同过渡step-start | 阻止帧与帧之间的过渡，瞬间切换到下一帧animation-delay | 延迟播放的时间animation-iteration-count | 循环次数—-默认为1，infinite为无限循环播放animation-direction | 播放方向—-默认normal，向前播放 alternate，播放次数为偶数则向前播放，为奇数时向反方向播放animation-play-state | 动画状态 running 动起来 paused暂停 关键帧声明动画 @keyframes@keyframes name{ from{ css样式; } percentage{ css样式; } to{ css样式; }} @keyframes name{ 0%{ css样式; } percentage{ css样式; } 100%{ css样式; }} 调用@keyframes声明的动画animation:run 1s infinite alternate ;]]></content>
  </entry>
  <entry>
    <title><![CDATA[190814练习：旋转的正方体]]></title>
    <url>%2F2019%2F08%2F14%2FCSS3%E5%8A%A8%E7%94%BB%E7%BB%83%E4%B9%A0%EF%BC%9A%E6%97%8B%E8%BD%AC%E7%9A%84%E6%AD%A3%E6%96%B9%E4%BD%93%2F</url>
    <content type="text"><![CDATA[8月14号的练习 纯CSS 主要属性：transform, position, transition 大量冗余代码 效果不甚如意 图片路径：images/ 图片名称 01.jpg, 02.jpg 以及03 04 05 06.jpg 结构 1234567891011121314151617181920&lt;body&gt; &lt;div class=&quot;all&quot;&gt; &lt;div class=&quot;boxA&quot;&gt; &lt;div class=&quot;face&quot;&gt;&lt;/div&gt; &lt;div class=&quot;face&quot;&gt;&lt;/div&gt; &lt;div class=&quot;face&quot;&gt;&lt;/div&gt; &lt;div class=&quot;face&quot;&gt;&lt;/div&gt; &lt;div class=&quot;face&quot;&gt;&lt;/div&gt; &lt;div class=&quot;face&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;boxB&quot;&gt; &lt;div class=&quot;face&quot;&gt;&lt;/div&gt; &lt;div class=&quot;face&quot;&gt;&lt;/div&gt; &lt;div class=&quot;face&quot;&gt;&lt;/div&gt; &lt;div class=&quot;face&quot;&gt;&lt;/div&gt; &lt;div class=&quot;face&quot;&gt;&lt;/div&gt; &lt;div class=&quot;face&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 样式1234567891011121314151617181920212223242526272829303132333435363738body&#123;background-color: #000;perspective: 1500px;&#125;.all&#123;transform-style: preserve-3d;margin: 150px auto;perspective-origin: center center;position: relative;width: 302px;height: 302px;&#125;.face&#123;background-size: cover;&#125;.boxA&#123;position: absolute;transform-style: preserve-3d;width: 302px;height: 302px;animation: rotA 10s infinite linear;&#125;.boxA .face&#123;width: 300px;height: 300px;position: absolute;opacity: .5;border: 1px solid #000;transition: all 1s linear;&#125;.boxA .face:nth-child(1)&#123;transform: translateZ(-150px);background: url(images/01.jpg);&#125;.boxA .face:nth-child(2)&#123;transform: rotateY(180deg) translateZ(-150px);background: url(images/02.jpg);&#125;.boxA .face:nth-child(3)&#123;transform: rotateX(90deg) translateZ(-150px);background: url(images/03.jpg);&#125;.boxA .face:nth-child(4)&#123;transform: rotateX(-90deg) translateZ(-150px);background: url(images/04.jpg);&#125;.boxA .face:nth-child(5)&#123;transform: rotateY(90deg) translateZ(-150px);background: url(images/05.jpg);&#125;.boxA .face:nth-child(6)&#123;transform: rotateY(-90deg) translateZ(-150px);background: url(images/06.jpg);&#125; .boxA:hover .face:nth-child(1)&#123;transform: translateZ(-200px);background: url(images/01.jpg);&#125;.boxA:hover .face:nth-child(2)&#123;transform: rotateY(180deg) translateZ(-200px);background: url(images/02.jpg);&#125;.boxA:hover .face:nth-child(3)&#123;transform: rotateX(90deg) translateZ(-200px);background: url(images/03.jpg);&#125;.boxA:hover .face:nth-child(4)&#123;transform: rotateX(-90deg) translateZ(-200px);background: url(images/04.jpg);&#125;.boxA:hover .face:nth-child(5)&#123;transform: rotateY(90deg) translateZ(-200px);background: url(images/05.jpg);&#125;.boxA:hover .face:nth-child(6)&#123;transform: rotateY(-90deg) translateZ(-200px);background: url(images/06.jpg);&#125; .boxB&#123;position: absolute;transform-style: preserve-3d;width: 100px;height: 100px;animation: rotB 10s infinite linear;margin: 100px;&#125;.boxB .face&#123;width: 100px;height: 100px;position: absolute;transition: all 1s linear;&#125;.boxB .face:nth-child(1)&#123;transform: translateZ(-50px);background: url(images/01.jpg);&#125;.boxB .face:nth-child(2)&#123;transform: rotateY(180deg) translateZ(-50px);background: url(images/02.jpg);&#125;.boxB .face:nth-child(3)&#123;transform: rotateX(90deg) translateZ(-50px);background: url(images/03.jpg);&#125;.boxB .face:nth-child(4)&#123;transform: rotateX(-90deg) translateZ(-50px);background: url(images/04.jpg);&#125;.boxB .face:nth-child(5)&#123;transform: rotateY(90deg) translateZ(-50px);background: url(images/05.jpg);&#125;.boxB .face:nth-child(6)&#123;transform: rotateY(-90deg) translateZ(-50px);background: url(images/06.jpg);&#125;@keyframes rotA&#123; 0%&#123;transform: rotateY(0) rotateZ(0) rotateX(0)&#125; 100%&#123;transform: rotateY(359deg) rotateZ(359deg) rotateX(359deg)&#125;&#125;@keyframes rotB&#123; 0%&#123;transform: rotateX(0) rotateZ(0) rotateY(0)&#125; 100%&#123;transform: rotateX(359deg) rotateZ(359deg) rotateY(359deg)&#125;&#125;]]></content>
  </entry>
</search>
